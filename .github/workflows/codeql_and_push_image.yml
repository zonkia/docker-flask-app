name: Release Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  TF_CLOUD_ORGANIZATION: "stanle1-home"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "docker-flask-app"
  CONFIG_DIRECTORY: "./"

jobs:
  # analyze:
  #   name: Analyze code
  #   runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
  #   timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       language: [ 'python' ]

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v3

  #   - name: Initialize CodeQL
  #     uses: github/codeql-action/init@v2
  #     with:
  #       languages: ${{ matrix.language }}

  #   - name: Autobuild
  #     uses: github/codeql-action/autobuild@v2

  #   - name: Perform CodeQL Analysis
  #     uses: github/codeql-action/analyze@v2
  #     with:
  #       category: "/language:${{matrix.language}}"

  tag_repo:
    if: github.event_name == 'push'
    #needs: analyze
    runs-on: ubuntu-22.04
    name: Tag Repository
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'

    - name: Bump version and push tag
      id: bump
      uses: anothrNick/github-tag-action@1.64.0 # Don't use @master or @v1 unless you're happy to test the latest version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # if you don't want to set write permissions use a PAT token
        WITH_V: true
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}

  build:
    if: github.event_name == 'push'
    needs: tag_repo
    name: Build Image and Push to ECR
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1.6.2

    - name: Build, tag, and push image to Amazon ECR
      id: build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: docker-flask-app
        IMAGE_TAG: ${{ needs.tag_repo.outputs.new_tag }}
        SECRET: ${{ secrets.SECRET_SIGNING_PASSPHRASE }}
      run: |
        cd image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        ecr_image_encrypted=$(gpg --symmetric --batch --passphrase "$SECRET" --output - <(echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG") | base64 -w0)
        echo "ecr_image=$ecr_image_encrypted" >> "$GITHUB_OUTPUT"   
        ecr_registry_encrypted=$(gpg --symmetric --batch --passphrase "$SECRET" --output - <(echo "$ECR_REGISTRY/$ECR_REPOSITORY") | base64 -w0)
        echo "ecr_reg=$ecr_registry_encrypted" >> "$GITHUB_OUTPUT" 
    outputs:
      ecr_image: ${{ steps.build.outputs.ecr_image }}
      ecr_reg: ${{ steps.login-ecr.outputs.registry }}
        
  release:
    runs-on: ubuntu-latest
    needs: [build, tag_repo]
    name: Release || Rollback
    steps:

    - name: Release
      id: create_release
      if: needs.tag_repo.outputs.new_tag != ''
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.tag_repo.outputs.new_tag }}
        release_name: Version ${{ needs.tag_repo.outputs.new_tag }}
        draft: false
        #prerelease: true

    - name: Rollback Release
      if: failure() && steps.create_release.outputs.id != ''
      uses: author/action-rollback@1.0.3
      with:
        # Using a known release ID
        id: ${{ steps.create_release.id }}
        # Using a tag name
        tag: ${{ needs.tag_repo.outputs.new_tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  terraform:
    needs: [release, build]
    runs-on: ubuntu-latest
    name: "Terraform Apply"
    env:
      SECRET: ${{ secrets.SECRET_SIGNING_PASSPHRASE }}
    steps:
    - name: Clone the repository code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1.6.2

    - name: Setup the Terraform CLI
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Initialize the Terraform working directory
      working-directory: ./
      id: init
      run: terraform init

    - name: Setup Terraform variables
      working-directory: ./
      id: vars
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: docker-flask-app
        IMAGE_TAG: ${{ needs.tag_repo.outputs.new_tag }}
      run: |
        #ecr_image=$(gpg --decrypt --quiet --batch --passphrase "$SECRET" --output - <(echo "${{ needs.build.outputs.ecr_image }}" | base64 --decode))
        #ecr_registry=$(gpg --decrypt --quiet --batch --passphrase "$SECRET" --output - <(echo "${{ needs.build.outputs.ecr_reg }}" | base64 --decode))

        cat > terraform.tfvars <<EOF
        image_name = "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        ecr_registry = "$ECR_REGISTRY/$ECR_REPOSITORY"
        EOF

    - name: Apply the Terraform execution plan
      working-directory: ./
      id: plan
      run: terraform plan
#      run: terraform apply -auto-approve -no-color




  # terraform:
  #   needs: [release, build]
  #   name: "Terraform Apply"
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Upload Configuration
  #       uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
  #       id: apply-upload
  #       with:
  #         workspace: ${{ env.TF_WORKSPACE }}
  #         directory: ${{ env.CONFIG_DIRECTORY }}

  #     - name: Setup Terraform variables
  #       working-directory: ./terraform
  #       id: vars
  #       run: |-
  #         cat > terraform.tfvars <<EOF
  #         image_tag = "${{ needs.build.outputs.ecr_image }}"
  #         EOF

  #     - name: Create Apply Run
  #       uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
  #       id: apply-run
  #       with:
  #         workspace: ${{ env.TF_WORKSPACE }}
  #         configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}

  #     - name: Apply
  #       uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
  #       if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
  #       id: apply
  #       with:
  #         run: ${{ steps.apply-run.outputs.run_id }}
  #         comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"