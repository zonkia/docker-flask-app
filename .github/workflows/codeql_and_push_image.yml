name: Deploy to ECR

on:
  push:
    branches: [ main ]

  pull_request:
    branches: [ main ]



jobs:

#  analyze:
#    name: Analyze code
#
#    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
#    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
#    permissions:
#      actions: read
#      contents: read
#      security-events: write

#    strategy:
#      fail-fast: false
#      matrix:
#        language: [ 'python' ]

#    steps:
#    - name: Checkout repository
#      uses: actions/checkout@v3

#    - name: Initialize CodeQL
#      uses: github/codeql-action/init@v2
#      with:
#        languages: ${{ matrix.language }}

#    - name: Autobuild
#      uses: github/codeql-action/autobuild@v2


#    - name: Perform CodeQL Analysis
#      uses: github/codeql-action/analyze@v2
#      with:
#        category: "/language:${{matrix.language}}"

  tag_repo:
    runs-on: ubuntu-22.04
    name: Tag Repository
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'

    - name: Bump version and push tag
      id: bump
      uses: anothrNick/github-tag-action@1.64.0 # Don't use @master or @v1 unless you're happy to test the latest version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # if you don't want to set write permissions use a PAT token
        WITH_V: true
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}

  build:
    if: github.event_name == 'push'
    needs: tag_repo
    name: Build Image
    runs-on: ubuntu-latest
   
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: docker-flask-app
        IMAGE_TAG: ${{ needs.tag_repo.outputs.new_tag }}
      run: |
        cd image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
  release:
    runs-on: ubuntu-latest
    needs: [build, tag_repo]
    name: Release with Rollback
    steps:
      
      - name: Release
        id: create_release
        if: needs.tag_repo.outputs.new_tag != ''
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.tag_repo.outputs.new_tag }}
          release_name: Version ${{ needs.tag_repo.outputs.new_tag }}
          draft: false
          #prerelease: true

      - name: Rollback Release
        if: failure() && steps.create_release.outputs.id != ''
        uses: author/action-rollback@stable
        with:
          # Using a known release ID
          id: ${{ steps.create_release.id }}
          # Using a tag name
          tag: ${{ needs.tag_repo.outputs.new_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}